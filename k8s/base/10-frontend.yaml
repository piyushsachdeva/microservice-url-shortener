# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend
  namespace: url-shortener
spec:
  replicas: 1
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
        - name: frontend
          image: itsbaivab/frontend:latest
          ports:
            - containerPort: 80
          resources:
            requests:
              memory: "32Mi"
              cpu: "10m"
            limits:
              memory: "64Mi"
              cpu: "50m"
          env:
            - name: API_BASE_URL
              value: "http://nginx-gateway:80"
---
# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: frontend
  namespace: url-shortener
spec:
  selector:
    app: frontend
  ports:
    - port: 3000
      targetPort: 80
      name: http
  type: ClusterIP
---
# Frontend ConfigMap for static files
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-content
  namespace: url-shortener
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>URL Shortener</title>
        <link rel="stylesheet" href="styles.css">
    </head>
    <body>
        <div class="container">
            <header>
                <h1>ðŸ”— URL Shortener</h1>
                <p>Transform your long URLs into short, shareable links</p>
            </header>
            
            <main>
                <section class="url-form-section">
                    <form id="urlForm" class="url-form">
                        <div class="input-group">
                            <input type="url" id="urlInput" placeholder="Enter your long URL here..." required>
                            <button type="submit" class="shorten-btn">
                                <span>Shorten</span>
                                <div class="loading-spinner"></div>
                            </button>
                        </div>
                    </form>
                </section>

                <section class="dashboard">
                    <div class="stats-grid">
                        <div class="stat-card">
                            <h3>Total Links</h3>
                            <span class="stat-number" id="totalLinks">-</span>
                        </div>
                        <div class="stat-card">
                            <h3>Total Clicks</h3>
                            <span class="stat-number" id="totalClicks">-</span>
                        </div>
                        <div class="stat-card">
                            <h3>Today's Links</h3>
                            <span class="stat-number" id="todayLinks">-</span>
                        </div>
                        <div class="stat-card">
                            <h3>Today's Clicks</h3>
                            <span class="stat-number" id="todayClicks">-</span>
                        </div>
                    </div>
                </section>

                <section class="url-management">
                    <div class="section-header">
                        <h2>Your URLs</h2>
                        <button id="refreshBtn" class="refresh-btn">ðŸ”„ Refresh</button>
                    </div>
                    
                    <div class="table-container">
                        <table id="urlTable" class="url-table">
                            <thead>
                                <tr>
                                    <th>Short URL</th>
                                    <th>Original URL</th>
                                    <th>Clicks</th>
                                    <th>Created</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody id="urlTableBody">
                                <tr>
                                    <td colspan="5" class="loading-row">Loading URLs...</td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </section>
            </main>
        </div>

        <!-- Toast notifications -->
        <div id="toastContainer" class="toast-container"></div>

        <!-- Delete confirmation modal -->
        <div id="deleteModal" class="modal">
            <div class="modal-content">
                <h3>Confirm Deletion</h3>
                <p>Are you sure you want to delete this URL? This action cannot be undone.</p>
                <div class="modal-actions">
                    <button id="cancelDelete" class="btn-secondary">Cancel</button>
                    <button id="confirmDelete" class="btn-danger">Delete</button>
                </div>
            </div>
        </div>

        <script src="script.js"></script>
    </body>
    </html>
  styles.css: |
    /* Note: This is a minimal version. For full CSS, mount from external source */
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        color: #333;
    }

    .container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
    }

    header {
        text-align: center;
        margin-bottom: 3rem;
        color: white;
    }

    .url-form {
        background: white;
        padding: 2rem;
        border-radius: 12px;
        box-shadow: 0 8px 32px rgba(0,0,0,0.1);
        margin-bottom: 2rem;
    }
  script.js: |
    // Note: This is a minimal version. For full JavaScript, mount from external source
    const API_BASE = '/api';

    document.addEventListener('DOMContentLoaded', function() {
        const urlForm = document.getElementById('urlForm');
        const urlInput = document.getElementById('urlInput');
        
        urlForm.addEventListener('submit', async function(e) {
            e.preventDefault();
            const url = urlInput.value.trim();
            
            if (!url) return;
            
            try {
                const response = await fetch(`${API_BASE}/generate`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ url: url })
                });
                
                if (response.ok) {
                    const result = await response.json();
                    showToast(`Short URL created: ${result.short_url}`, 'success');
                    urlInput.value = '';
                    loadStats();
                    loadUrls();
                } else {
                    showToast('Error creating short URL', 'error');
                }
            } catch (error) {
                console.error('Error:', error);
                showToast('Network error', 'error');
            }
        });
        
        function showToast(message, type) {
            console.log(`${type.toUpperCase()}: ${message}`);
        }
        
        function loadStats() {
            // Placeholder for stats loading
        }
        
        function loadUrls() {
            // Placeholder for URL loading
        }
        
        // Load initial data
        loadStats();
        loadUrls();
    });
