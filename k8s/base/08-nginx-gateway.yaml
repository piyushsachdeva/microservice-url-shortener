# Nginx ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: url-shortener
data:
  nginx.conf: |
    events {
        worker_connections 1024;
    }

    http {
        upstream link-service {
            server link-service:8001;
        }

        upstream redirect-service {
            server redirect-service:8002;
        }

        upstream stats-service {
            server stats-service:8003;
        }

        upstream notification-service {
            server notification-service:8004;
        }

        upstream frontend {
            server frontend:3000;
        }

        # Rate limiting
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req_zone $binary_remote_addr zone=redirect:10m rate=100r/s;

        server {
            listen 80;
            server_name localhost;

            # Health check endpoint
            location /health {
                return 200 "OK";
                add_header Content-Type text/plain;
            }

            # Link generation service
            location /api/generate {
                limit_req zone=api burst=20 nodelay;
                proxy_pass http://link-service/generate;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            # Link deletion service
            location /api/delete {
                limit_req zone=api burst=10 nodelay;
                proxy_pass http://link-service/delete;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            # Redirect service (short URLs)
            location ~ ^/([a-zA-Z0-9]+)$ {
                limit_req zone=redirect burst=200 nodelay;
                proxy_pass http://redirect-service/redirect/$1;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            # Stats service
            location /api/stats {
                limit_req zone=api burst=10 nodelay;
                proxy_pass http://stats-service/stats;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            # Notification service
            location /api/notifications {
                limit_req zone=api burst=5 nodelay;
                proxy_pass http://notification-service/notifications;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }

            # Frontend application
            location / {
                proxy_pass http://frontend;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                
                # Handle CORS for frontend
                add_header Access-Control-Allow-Origin *;
                add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS";
                add_header Access-Control-Allow-Headers "Content-Type, Authorization";
                
                if ($request_method = 'OPTIONS') {
                    return 204;
                }
            }
        }
    }
---
# Nginx Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-gateway
  namespace: url-shortener
spec:
  replicas: 2
  selector:
    matchLabels:
      app: nginx-gateway
  template:
    metadata:
      labels:
        app: nginx-gateway
    spec:
      containers:
        - name: nginx
          image: nginx:alpine
          ports:
            - containerPort: 80
          volumeMounts:
            - name: nginx-config
              mountPath: /etc/nginx/nginx.conf
              subPath: nginx.conf
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"
      volumes:
        - name: nginx-config
          configMap:
            name: nginx-config
---
# Nginx Service
apiVersion: v1
kind: Service
metadata:
  name: nginx-gateway
  namespace: url-shortener
spec:
  selector:
    app: nginx-gateway
  ports:
    - port: 80
      targetPort: 80
  type: LoadBalancer
